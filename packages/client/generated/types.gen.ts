// This file is auto-generated by @hey-api/openapi-ts

export type Subject = {
    /**
     * The unique identifier for the subject
     */
    id: string;
    /**
     * The name of the subject
     */
    name: string;
};

export type SubjectCreate = {
    /**
     * The name of the subject
     */
    name: string;
};

export type SubjectUpdate = {
    /**
     * The name of the subject
     */
    name: string;
};

export type GetSubjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/subjects/';
};

export type GetSubjectsErrors = {
    /**
     * Bad Request - The request payload is invalid or malformed
     */
    400: {
        /**
         * Bad Request - The request payload is invalid or malformed
         */
        status: number;
        /**
         * Standard error code for invalid request data
         */
        code: string;
        /**
         * Generic message indicating validation failure
         */
        message: string;
        /**
         * List of specific validation errors by field
         */
        details: Array<{
            /**
             * Name of the field that failed validation
             */
            field: string;
            /**
             * Detailed validation error message for the field
             */
            info: string;
        }>;
    };
    /**
     * Unauthorized - Authentication is required or has failed
     */
    401: {
        /**
         * Unauthorized - Authentication is required or has failed
         */
        status: number;
        /**
         * Standard error code for authentication failures
         */
        code: string;
        /**
         * Generic message indicating authentication failure
         */
        message: string;
    };
    /**
     * Forbidden - User lacks required permissions
     */
    403: {
        /**
         * Forbidden - User lacks required permissions
         */
        status: number;
        /**
         * Standard error code for permission-related failures
         */
        code: string;
        /**
         * Generic message indicating insufficient permissions
         */
        message: string;
    };
    /**
     * Not Found - The requested resource does not exist
     */
    404: {
        /**
         * Not Found - The requested resource does not exist
         */
        status: number;
        /**
         * Standard error code for missing resources
         */
        code: string;
        /**
         * Message indicating the requested resource could not be found
         */
        message: string;
    };
    /**
     * Internal Server Error - Unexpected server-side failure
     */
    500: {
        /**
         * Internal Server Error - Unexpected server-side failure
         */
        status: number;
        /**
         * Standard error code for server failures
         */
        code: string;
        /**
         * Generic message for unexpected server errors
         */
        message: string;
    };
};

export type GetSubjectsError = GetSubjectsErrors[keyof GetSubjectsErrors];

export type GetSubjectsResponses = {
    /**
     * Subjects retrieved successfully
     */
    200: Array<{
        /**
         * The unique identifier for the subject
         */
        id: string;
        /**
         * The name of the subject
         */
        name: string;
    }>;
};

export type GetSubjectsResponse = GetSubjectsResponses[keyof GetSubjectsResponses];

export type PostSubjectsData = {
    body: SubjectCreate;
    path?: never;
    query?: never;
    url: '/subjects/';
};

export type PostSubjectsErrors = {
    /**
     * Bad Request - The request payload is invalid or malformed
     */
    400: {
        /**
         * Bad Request - The request payload is invalid or malformed
         */
        status: number;
        /**
         * Standard error code for invalid request data
         */
        code: string;
        /**
         * Generic message indicating validation failure
         */
        message: string;
        /**
         * List of specific validation errors by field
         */
        details: Array<{
            /**
             * Name of the field that failed validation
             */
            field: string;
            /**
             * Detailed validation error message for the field
             */
            info: string;
        }>;
    };
    /**
     * Unauthorized - Authentication is required or has failed
     */
    401: {
        /**
         * Unauthorized - Authentication is required or has failed
         */
        status: number;
        /**
         * Standard error code for authentication failures
         */
        code: string;
        /**
         * Generic message indicating authentication failure
         */
        message: string;
    };
    /**
     * Forbidden - User lacks required permissions
     */
    403: {
        /**
         * Forbidden - User lacks required permissions
         */
        status: number;
        /**
         * Standard error code for permission-related failures
         */
        code: string;
        /**
         * Generic message indicating insufficient permissions
         */
        message: string;
    };
    /**
     * Not Found - The requested resource does not exist
     */
    404: {
        /**
         * Not Found - The requested resource does not exist
         */
        status: number;
        /**
         * Standard error code for missing resources
         */
        code: string;
        /**
         * Message indicating the requested resource could not be found
         */
        message: string;
    };
    /**
     * Internal Server Error - Unexpected server-side failure
     */
    500: {
        /**
         * Internal Server Error - Unexpected server-side failure
         */
        status: number;
        /**
         * Standard error code for server failures
         */
        code: string;
        /**
         * Generic message for unexpected server errors
         */
        message: string;
    };
};

export type PostSubjectsError = PostSubjectsErrors[keyof PostSubjectsErrors];

export type PostSubjectsResponses = {
    /**
     * Subject created successfully
     */
    201: {
        /**
         * The unique identifier for the subject
         */
        id: string;
        /**
         * The name of the subject
         */
        name: string;
    };
};

export type PostSubjectsResponse = PostSubjectsResponses[keyof PostSubjectsResponses];

export type DeleteSubjectsByIdData = {
    body?: never;
    path: {
        /**
         * The unique identifier of the subject
         */
        id: string;
    };
    query?: never;
    url: '/subjects/{id}';
};

export type DeleteSubjectsByIdErrors = {
    /**
     * Bad Request - The request payload is invalid or malformed
     */
    400: {
        /**
         * Bad Request - The request payload is invalid or malformed
         */
        status: number;
        /**
         * Standard error code for invalid request data
         */
        code: string;
        /**
         * Generic message indicating validation failure
         */
        message: string;
        /**
         * List of specific validation errors by field
         */
        details: Array<{
            /**
             * Name of the field that failed validation
             */
            field: string;
            /**
             * Detailed validation error message for the field
             */
            info: string;
        }>;
    };
    /**
     * Unauthorized - Authentication is required or has failed
     */
    401: {
        /**
         * Unauthorized - Authentication is required or has failed
         */
        status: number;
        /**
         * Standard error code for authentication failures
         */
        code: string;
        /**
         * Generic message indicating authentication failure
         */
        message: string;
    };
    /**
     * Forbidden - User lacks required permissions
     */
    403: {
        /**
         * Forbidden - User lacks required permissions
         */
        status: number;
        /**
         * Standard error code for permission-related failures
         */
        code: string;
        /**
         * Generic message indicating insufficient permissions
         */
        message: string;
    };
    /**
     * Not Found - The requested resource does not exist
     */
    404: {
        /**
         * Not Found - The requested resource does not exist
         */
        status: number;
        /**
         * Standard error code for missing resources
         */
        code: string;
        /**
         * Message indicating the requested resource could not be found
         */
        message: string;
    };
    /**
     * Internal Server Error - Unexpected server-side failure
     */
    500: {
        /**
         * Internal Server Error - Unexpected server-side failure
         */
        status: number;
        /**
         * Standard error code for server failures
         */
        code: string;
        /**
         * Generic message for unexpected server errors
         */
        message: string;
    };
};

export type DeleteSubjectsByIdError = DeleteSubjectsByIdErrors[keyof DeleteSubjectsByIdErrors];

export type DeleteSubjectsByIdResponses = {
    /**
     * Subject deleted successfully
     */
    200: {
        /**
         * Indicates if the deletion was successful
         */
        success: boolean;
    };
};

export type DeleteSubjectsByIdResponse = DeleteSubjectsByIdResponses[keyof DeleteSubjectsByIdResponses];

export type GetSubjectsByIdData = {
    body?: never;
    path: {
        /**
         * The unique identifier of the subject
         */
        id: string;
    };
    query?: never;
    url: '/subjects/{id}';
};

export type GetSubjectsByIdErrors = {
    /**
     * Bad Request - The request payload is invalid or malformed
     */
    400: {
        /**
         * Bad Request - The request payload is invalid or malformed
         */
        status: number;
        /**
         * Standard error code for invalid request data
         */
        code: string;
        /**
         * Generic message indicating validation failure
         */
        message: string;
        /**
         * List of specific validation errors by field
         */
        details: Array<{
            /**
             * Name of the field that failed validation
             */
            field: string;
            /**
             * Detailed validation error message for the field
             */
            info: string;
        }>;
    };
    /**
     * Unauthorized - Authentication is required or has failed
     */
    401: {
        /**
         * Unauthorized - Authentication is required or has failed
         */
        status: number;
        /**
         * Standard error code for authentication failures
         */
        code: string;
        /**
         * Generic message indicating authentication failure
         */
        message: string;
    };
    /**
     * Forbidden - User lacks required permissions
     */
    403: {
        /**
         * Forbidden - User lacks required permissions
         */
        status: number;
        /**
         * Standard error code for permission-related failures
         */
        code: string;
        /**
         * Generic message indicating insufficient permissions
         */
        message: string;
    };
    /**
     * Not Found - The requested resource does not exist
     */
    404: {
        /**
         * Not Found - The requested resource does not exist
         */
        status: number;
        /**
         * Standard error code for missing resources
         */
        code: string;
        /**
         * Message indicating the requested resource could not be found
         */
        message: string;
    };
    /**
     * Internal Server Error - Unexpected server-side failure
     */
    500: {
        /**
         * Internal Server Error - Unexpected server-side failure
         */
        status: number;
        /**
         * Standard error code for server failures
         */
        code: string;
        /**
         * Generic message for unexpected server errors
         */
        message: string;
    };
};

export type GetSubjectsByIdError = GetSubjectsByIdErrors[keyof GetSubjectsByIdErrors];

export type GetSubjectsByIdResponses = {
    /**
     * Subject retrieved successfully
     */
    200: {
        /**
         * The unique identifier for the subject
         */
        id: string;
        /**
         * The name of the subject
         */
        name: string;
    };
};

export type GetSubjectsByIdResponse = GetSubjectsByIdResponses[keyof GetSubjectsByIdResponses];

export type PutSubjectsByIdData = {
    body: SubjectUpdate;
    path: {
        /**
         * The unique identifier of the subject
         */
        id: string;
    };
    query?: never;
    url: '/subjects/{id}';
};

export type PutSubjectsByIdErrors = {
    /**
     * Bad Request - The request payload is invalid or malformed
     */
    400: {
        /**
         * Bad Request - The request payload is invalid or malformed
         */
        status: number;
        /**
         * Standard error code for invalid request data
         */
        code: string;
        /**
         * Generic message indicating validation failure
         */
        message: string;
        /**
         * List of specific validation errors by field
         */
        details: Array<{
            /**
             * Name of the field that failed validation
             */
            field: string;
            /**
             * Detailed validation error message for the field
             */
            info: string;
        }>;
    };
    /**
     * Unauthorized - Authentication is required or has failed
     */
    401: {
        /**
         * Unauthorized - Authentication is required or has failed
         */
        status: number;
        /**
         * Standard error code for authentication failures
         */
        code: string;
        /**
         * Generic message indicating authentication failure
         */
        message: string;
    };
    /**
     * Forbidden - User lacks required permissions
     */
    403: {
        /**
         * Forbidden - User lacks required permissions
         */
        status: number;
        /**
         * Standard error code for permission-related failures
         */
        code: string;
        /**
         * Generic message indicating insufficient permissions
         */
        message: string;
    };
    /**
     * Not Found - The requested resource does not exist
     */
    404: {
        /**
         * Not Found - The requested resource does not exist
         */
        status: number;
        /**
         * Standard error code for missing resources
         */
        code: string;
        /**
         * Message indicating the requested resource could not be found
         */
        message: string;
    };
    /**
     * Internal Server Error - Unexpected server-side failure
     */
    500: {
        /**
         * Internal Server Error - Unexpected server-side failure
         */
        status: number;
        /**
         * Standard error code for server failures
         */
        code: string;
        /**
         * Generic message for unexpected server errors
         */
        message: string;
    };
};

export type PutSubjectsByIdError = PutSubjectsByIdErrors[keyof PutSubjectsByIdErrors];

export type PutSubjectsByIdResponses = {
    /**
     * Subject updated successfully
     */
    200: {
        /**
         * The unique identifier for the subject
         */
        id: string;
        /**
         * The name of the subject
         */
        name: string;
    };
};

export type PutSubjectsByIdResponse = PutSubjectsByIdResponses[keyof PutSubjectsByIdResponses];

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    200: unknown;
};